name: Get Environment (wemogy)
author: wemogy
description: Detects on which branch or Pull Request a workflow is running on and derives an environment information from that.
branding:
  icon: "git-branch"
  color: "blue"

inputs:
  branch:
    description: "Name of the branch this is running on"
    required: true
  is-pull-request:
    description: "Is this running in context of a Pull Request?"
    required: true

  prod-branch:
    description: "Name of the branch that should result in environment 'prod'"
    default: "prod"
    required: true
  prod-domain-prefix:
    description: "Prefix to use in domains when environment is 'prod'"
    default: ""
    required: true

  staging-branch:
    description: "Name of the branch that should result in environment 'staging'"
    default: "staging"
    required: true
  staging-domain-prefix:
    description: "Prefix to use in domains when environment is 'staging'"
    default: "staging"
    required: true

  dev-branch:
    description: "Name of the branch that should result in environment 'dev'"
    default: "main"
    required: true
  dev-domain-prefix:
    description: "Prefix to use in domains when environment is 'dev'"
    default: "dev"
    required: true

  pr-environment:
    description: "Environment that should be used for Pull Request deployments"
    default: "dev"
    required: true
  pr-use-custom-environment:
    description: "Should the Pull Request be deployed into a custom environment?"
    default: "false"
    required: true

outputs:
  env:
    description: "The Environment this branch is targeting"
    value: ${{ steps.check.outputs.env }}
  exact-match:
    description: "Does the current branch exactly match one of the environments?"
    value: ${{ steps.check.outputs.exact-match }}
  domain-prefix:
    description: "Prefix to use in domains"
    value: ${{ steps.check.outputs.domain-prefix }}
  slug:
    description: "Environment slug to attach as suffix to versions and resources like Kubernetes namespaces"
    value: ${{ steps.check.outputs.slug }}

runs:
  using: "composite"
  steps:
    - name: Check
      id: check
      shell: bash
      run: |
        CURRENT_BRANCH=${{ inputs.branch }}
        IS_PULL_REQUEST=${{ inputs.is-pull-request }}
        DEV_BRANCH=${{ inputs.dev-branch }}
        DEV_DOMAIN_PREFIX=${{ inputs.dev-domain-prefix }}
        STAGING_BRANCH=${{ inputs.staging-branch }}
        STAGING_DOMAIN_PREFIX=${{ inputs.staging-domain-prefix }}
        PROD_BRANCH=${{ inputs.prod-branch }}
        PROD_DOMAIN_PREFIX=${{ inputs.prod-domain-prefix }}
        PR_ENVIRONMENT=${{ inputs.pr-environment }}
        IS_CUSTOM_ENVIRONMENT=${{ inputs.pr-use-custom-environment }}

        CUSTOM_ENVIRONMENT=false

        # Compare current branch with environments
        if [[ "$CURRENT_BRANCH" == "$DEV_BRANCH" ]]; then
          ENVIRONMENT=dev
          EXACT_MATCH=true
          DOMAIN_PREFIX=$DEV_DOMAIN_PREFIX
          SLUG=dev
        elif [[ "$CURRENT_BRANCH" == "$STAGING_BRANCH" ]]; then
          ENVIRONMENT=staging
          EXACT_MATCH=true
          DOMAIN_PREFIX=$STAGING_DOMAIN_PREFIX
          SLUG=staging
        elif [[ "$CURRENT_BRANCH" == "$PROD_BRANCH" ]]; then
          ENVIRONMENT=prod
          EXACT_MATCH=true
          DOMAIN_PREFIX=$PROD_DOMAIN_PREFIX
          SLUG=prod
        elif [[ "$IS_PULL_REQUEST" == "true" ]]; then
          if [[ "$IS_CUSTOM_ENVIRONMENT" == "true" ]]; then
            ENVIRONMENT=pr${{ github.event.pull_request.number }}
            CUSTOM_ENVIRONMENT=true
          else
            ENVIRONMENT=$PR_ENVIRONMENT
          fi

          EXACT_MATCH=false
          DOMAIN_PREFIX=${{ github.event.pull_request.number }}.pr
          SLUG=pr${{ github.event.pull_request.number }}
        else
          echo "::warning title=Could not find environment::No matching branch and no Pull Request found."
        fi

        echo "Environment: $ENVIRONMENT"
        echo "::set-output name=env::$ENVIRONMENT"
        echo "Exact match: $EXACT_MATCH"
        echo "::set-output name=exact-match::$EXACT_MATCH"
        echo "Domain prefix: $DOMAIN_PREFIX"
        echo "::set-output name=domain-prefix::$DOMAIN_PREFIX"
        echo "Slug: $SLUG"
        echo "::set-output name=slug::$SLUG"
